"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 2.0.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加搜索路径方便apps python包里面的路径编写
# sys.path返回模块的搜索路径,初始化时使用PYTHONOATH环境变量的值
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'rxnr0hqh-+tymy)(5a!1dl!bty(n9%)l0%#z#=p3j$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',   # 富文本编辑器
    'haystack',   # 注册全文检索框架
    'user.apps.UserConfig',  # 注册子应用
    'cart.apps.CartConfig',
    'order.apps.OrderConfig',
    'goods.apps.GoodsConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'USER': 'root',
        'PASSWORD': 'msql34',
        'PORT': '3306',
        'HOST': '127.0.0.1'
    }
}

# django认证系统使用的模型类 要在迁移文件生成之前指明,不然影响后续代码
AUTH_USER_MODEL = 'user.User'
# 使用django自带的authenticate()方法时验证user
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static"), ]
# 静态文件的收集路径
STATIC_ROOT = "/var/www/dailyfresh/static"

# 富文本编辑器配置
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}



# 邮箱的配置文件

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# smpt服务地址
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '1863834213@163.com'
# 邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'password'
# 收件人看到的发件人
# DEFAULT_FROM = '天天生鲜<1863834213@163.com>'

# 设置django的redis缓存
CACHES = {
    'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://127.0.0.1:6379/2',
            "OPTIONS": {
                    "CLIENT_CLASS": "django_redis.client.DefaultClient",
},
    }
}
REDIS_TIME = 7*24*60*60
CUBES_REDIS_TIMEOUT = 60*60
NEVER_REDIS_TIMEOUT = 365*24*60*60

# 设置缓存存储session，此时mysql中的django_session将不再存储session
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 与CACHES中的default对应
SESSION_CACHE_ALIAS = "default"
# session在cookie中的保存时间
SESSION_COOKIE_AGE = 60*30
# 设置session在浏览器关闭时过期
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# 配置url地址为了方便调用Django自带的用户登录验证方法
LOGIN_URL = "/user/login"

# 设置django的文件存储类,调用上传文件和打开文件的方法 默认:django.core.files.storage.FileSystemStorage
DEFAULT_FILE_STORAGE = "utils.fdfs.storage.FfdsStorage"


# 配置自定义文件存储配置中设置fdfs使用client.config文件路径
FDFS_CLIENT_CONF = './utils/fdfs/client.conf'

# 配置自定义文件存储配置中设置存储在服务器上nginx的IP和端口号
FDFS_URL = 'http://192.168.1.17:8888/'


# 全文检索框架的配置(haystack)
HAYSTACK_CONNECTIONS = {
    'default': {
        # 选择引擎(haystock包内的backend后端文件夹选中whoosh的相关配置文件的Engine函数)
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',

        # 索引文件放置路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
# 设置即时生成索引(haystock包下,signal(标识)索引文件生成时间为,即时生成)
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 1

# 设置url路径结尾不是/
# APPEND_SLASH=False
